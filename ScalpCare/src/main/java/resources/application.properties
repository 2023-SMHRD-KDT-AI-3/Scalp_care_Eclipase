# 모든 설정은 application.properties 내에서 

# 톰캣 port 번호 설정
server.port=8089


# 요청 → FC → POJO
# POJO로 부터 view 이름(ex. "select") 받음
# "select" → ViewResolver → "/WEB-INF/view/select.jsp"
# ViewResolver의 prefix, suffix 지정 필요
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp


# MyBatis와 같은 JDBC 프레임워크 Starter를 추가했다면
# 반드시 DataSource(DataBase Connection Pool) 설정을 해주어야만 함!!!
# driver class
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# db url
spring.datasource.url=jdbc:mysql://localhost:3306/ai8
# username
spring.datasource.username=root
# password
spring.datasource.password=12345
# 다른 표기법
# spring:
#		datasource:
#			    password:12345


# Mapper.xml 파일 위치를 지정
mybatis.mapper-locations=com/smhrd/mapper/**.xml


#JPA에 대한 상세 설정
# 1. 문법 설정(선택이기는 한데 어지간하면 할 것)
# 어떤 DBMS의 문법으로 SQL문이 작성되길 원하는지 지정
# DBMS 문법 → Class 파일로 정의 해둠, 사용하는 데이터 DB에 맞는 Class 이름을 적음
# Maven Dependencies → hibernate-core → org.hibernate.dialect → 사용하는 DBMS 선택
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

# 2. ddl-auto
# create : 서버가 재시작 될 때마다 다시 테이블을 생성
#			→ 데이터가 날아감 → 개발 초기에만 사용
# update : 수정사항만 적용
spring.jpa.hibernate.ddl-auto=update

# 3-1. (선택)콘솔창에 실행된 SQL문을 출력할 것인지 설정
# → ex) select ~~ from ~~ where ~~ = {~~}
spring.jpa.show-sql=true

# 3-2. (선택)sql문이 출력될 때, 파싱해서 출력할 것인지
# → ex) select ~~ from ~~ where ~~ = "abcd}
spring.jpa.properties.hibernate.fromat_sql=true


# jackson databind의 json 변환방식을 gson에 맞추겠다는 설정
spring.mvc.converters.preferred-json-mapper=gson


